CLASSIFICATION DE TECHNOLOGIES SELON DIFFERENTS CRITERES
------------ Permettra de créer les règles ------------

__________________________
EXPLICATIONS DES CRITERES |
--------------------------
Popularité : 10*(Nombre de repository sur Github du langage)/(Nombre de repository du langage le plus utilisé)
(tentative de critère quantitatif pour moteur 0+...)

JavaScript	1234251	10,0
Java			1008122	8,17
Ruby			714471	5,79
Python			601862	4,88
PHP					522516	4,23
CSS					380858	3,09
C++					321684	2,61
C					290737	2,36
C#					250419	2,03
HTML			216354	1,75


							 | Popularité
-------------------------------------------------------------------------------------------
C							|
C++						|
Python				 |
Django				 |
QtScript			 |
Numpy					|
Sci-kit				|
Ruby					 |
Ruby-on-Rails	|
R							|
MathLab				|
Octave				 |
LISP					 |
Scheme				 |
Pascal				 |
Prolog				 |
Scala					|
SQL						|
PL/SQL				 |
PostGreSQL		 |
MySQL					|
VBA						|
Arduino				|
HTML
JavaScript
Json
XML
Swift
Objective-C
C#
Java
NodeJS
AJAX
Neo4J
MongoDB
Cansadra
PHP
Symfony
Fortran
INTERCAL
Basic
Scilab
Julia
LaTeX
Go
Maple
Sage
Perl
LolCat
Piet
WhiteSpace
Brainfuck
LOLCODE



; Comparaison entre ces technologies NoSQL :
; Cassandra, MongoDB,CouchDB,Redis,Riak,HBase,CouchBase,Neo4J,HyperTable,
; ElasticSearch, Accumulo, VoltDB, Scalaris

Comparison Of NoSQL Databases HBase, Cassandra & MongoDB:

HBase:

Key characteristics:
·         Distributed and scalable big data store
·         Strong consistency
·         Built on top of Hadoop HDFS
·         CP on CAP

Good for:
·         Optimized for read
·         Well suited for range based scan
·         Strict consistency
·         Fast read and write with scalability

Not good for:
·         Classic transactional applications or even relational analytics
·         Applications need full table scan
·         Data to be aggregated, rolled up, analyzed cross rows

Usage Case: Facebook message

Cassandra:

Key characteristics:
·         High availability
·         Incremental scalability
·         Eventually consistent
·         Trade-offs between consistency and latency
·         Minimal administration
·         No SPF (Single point of failure) – all nodes are the same in Cassandra
·         AP on CAP

Good for:
·         Simple setup, maintenance code
·         Fast random read/write
·         Flexible parsing/wide column requirement
·         No multiple secondary index needed

Not good for:
·         Secondary index
·         Relational data
·         Transactional operations (Rollback, Commit)
·         Primary & Financial record
·         Stringent and authorization needed on data
·         Dynamic queries/searching  on column data
·         Low latency

Usage Case: Twitter, Travel portal
MongoDB:

Key characteristics:
·         Schemas to change as applications evolve (Schema-free)
·         Full index support for high performance
·         Replication and failover for high availability
·         Auto Sharding for easy Scalability
·         Rich document based queries for easy readability
·         Master-slave model
·         CP on CAP

Good for:
·         RDBMS replacement for web applications
·         Semi-structured content management
·         Real-time analytics and high-speed logging, caching and high scalability
·         Web 2.0, Media, SAAS, Gaming

Not good for:
·         Highly transactional system
·         Applications with traditional database requirements such as foreign key constraints

Usage Case: Craigslist, Foursquare
